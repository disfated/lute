{% form_theme form 'form_table_layout.html.twig' %}

{{ form_start(form) }}

<table id="term">

  <tr id="languageSel"
    {% if ((showlanguageselector ?? false) != true) %}
      style="display:none;"
    {% endif %}
  >
    <td>Language</td>
    <td>{{ form_widget(form.language) }}</td>
  </tr>

  <tr>
    <td>Term</td>
    <td>{{ form_widget(form.Text, { 'attr': {'disabled': (disabletermediting ?? true) }}) }}</td>
    <td>
      <img src="/icn/external.png" title="Lookup" onclick="do_term_lookup()" />
    </td>
    <td>
      <img src="/icn/eye.png" title="Images" onclick="do_image_lookup()" />
    </td>
  </tr>

  <tr>
    <td>Parent</td>
    <td>{{ form_widget(form.ParentText) }}</td>
    {% if not form.ParentID.vars.value is empty %}
    <td>
      {% if parent_link_to_frame ?? false %}
      <a href="/read/termform/{{form.language.vars.value}}/{{form.ParentText.vars.value}}">&gt;</a>
      {% else %}
      <a href="/term/{{form.ParentID.vars.value}}/edit">&gt;</a>
      {% endif %}
    </td>
    {% endif %}
  </tr>

  {{ form_row(form.ParentID) }}
  {{ form_row(form.Romanization) }}

  <tr>
    <td>Translation<br /><img class="zoomableTermImage" id="term_image" src="{{ form.CurrentImage.vars.value }}" width="50px"/></td>
    <td>{{ form_widget(form.Translation) }}</td>
  </tr>

  {{ form_row(form.Status) }}
  {{ form_row(form.CurrentImage) }}
  {{ form_row(form.Sentence) }}

  {% do form.termTags.setRendered %}
  {# manually write list so it can be managed by tagit. #}
  <tr>
    <td>Tags</td>
    <td>
      <ul id="termtagslist" class="tags nomarginblock">
        {% for termTag in form.termTags %}
        <li>
          {{ termTag.vars.value }}
        </li>
        {% endfor %}
      </ul>
    </td>
  </tr>

  <tr>
    <td />
    <td align="right">
      {% if termdto.id %}
      <a href="#" onclick="show_term_sentences({{ termdto.id }}); return false;">Sentences</a>
      {% endif %}
      <button class="btn">{{ button_label|default('Save') }}</button>
    </td>
  </tr>
</table>



{{ form_end(form) }}

<script type="text/javascript">
  
  let set_parent_fields = function(event, ui) {
    if (ui.item == null) {
      // console.log('directly entered text, nothing to do.');
      return;
    }
    $('#term_dto_ParentText').val(ui.item.word);
    return false;
  };
  
  let set_up_parent_autocomplete = function() {
    $("#term_dto_ParentText").autocomplete({
      source: function(request, response) {
        const s = encodeURIComponent(request.term);
        const langid = parseInt($('#term_dto_language').val());
        $.ajax({
          url: `/term/search/${s}/${langid}`,
          type: 'GET',
          dataType: 'json',
          minLength: 2,
          success: function(data) {
            arr = data.map(function(word) {
              let label = word.text;
              if (word.translation != null && word.translation != '') {
                label = `${label} (${word.translation})`;
              }
              const obj = {
                label: label,
                value: word.id,
                word: word.text,
                translation: word.translation
              };
              return obj;
            });
            response(arr, data);
          }
        })
      },
      select: set_parent_fields,
      focus: set_parent_fields,
      change: set_parent_fields
    });
  };

  let setupTagit = function() {
    // term_dto is what symfony calls the form.
    var prototypeFieldName = 'term_dto[termTags][__name__]';
    var fieldIndex = 0;
    
    let invalidChar = function(s) { return /[\uD800-\uDFFF]/.test(s); };

    $('#termtagslist').tagit(
      {
        beforeTagAdded: function (_event, ui) {
          if (invalidChar(ui.tag.text())) {
            return;
          }
          fieldIndex++;
          $(this).tagit({fieldName: prototypeFieldName.replace('__name__', fieldIndex)});
        },
        availableTags: TAGS,
        fieldName: 'term_dto[termTags][0]'
      });

  };

  let handleAutofocus = function() {
    const wordfield = $('#wordfield');
    const transfield = $('#translationfield');

    if ($('#autofocus').val() != 'false') {
      if (wordfield.val()) {
        transfield.focus();
      }
      else {
        wordfield.focus();
      }
    }

  }
  $(document).ready(function () {
    top.frames.dictframe.location.href = '/read/empty';

    setupTagit();
    set_up_parent_autocomplete();

    // Approx good size for the text area:
    const w = $('#term_dto_Text').css('width');
    // Textareas seem to have their own dimensional quirks.
    const hackTextareaWidth = parseInt(parseInt(w) * 1.10);
    // console.log(`got term_dto_Text width = ${w} giving hack width ${hackTextareaWidth}`);
    $('#term_dto_Translation').css({'width': `${hackTextareaWidth}px`, 'height': '43px'});

    // Show sentences if this is a known term, otherwise show
    // the dictionary.
    if ('{{ termdto.id }}' != '') {
      // console.log('got termdto id = {{ termdto.id }}');
      show_term_sentences({{ termdto.id }});
    }
    else if (($('#term_dto_Text').val() ?? '') != '') {
      do_term_lookup(false);
    }

    // The "term" field is sometimes disabled, so it's not submitted,
    // causing problems b/c the entity Text is not set ... so
    // make sure it's enabled.
    // Ref https://stackoverflow.com/questions/8925716/
    //   disabled-form-fields-not-submitting-data
    $('form[name="term_dto"]').submit(function(e) {
      $(':disabled').each(function(e) {
        $(this).removeAttr('disabled');
      })
    });
  });

  /** LOOKUPS */

  const LANGUAGES = {{ render(url('app_language_jsonlist')) }};

  // Term lookups cycle through the available dictionaries in the language.
  var termdictindex = 0;

  let open_new_lookup_window = function(url) {
    window.open(
      url,
      'otherwin',
      'width=800, height=400, scrollbars=yes, menubar=no, resizable=yes, status=no'
    );
  };

  let get_lookup_url = function(dicturl, term) {
    let ret = dicturl;

    // Terms are saved with zero-width space between each token;
    // remove that for dict searches!
    const zeroWidthSpace = '\u200b';
    const sqlZWS = '%E2%80%8B';
    const cleantext = term.
          replaceAll(zeroWidthSpace, '').
          replace(/\s+/g, ' ');
    const searchterm = encodeURIComponent(cleantext).
          replaceAll(sqlZWS, '');
    ret = ret.replace('###', searchterm);
    // console.log(ret);
    return ret;
  };


  let do_image_lookup = function() {
    const langid = $('#term_dto_language').val();
    const text = $('#term_dto_Text').val();
    const parent_text = $('#term_dto_ParentText').val();

    if (langid == null || langid == '' || parseInt(langid) == 0 || text == null || text == '') {
      alert('Please select a language and enter the term.');
      return;
    }

    const raw_bing_url = 'https://www.bing.com/images/search?q=###&form=HDRSC2&first=1&tsc=ImageHoverTitle';
    let use_text = text;
    if (parent_text != null && parent_text != '')
      use_text = parent_text;
    const binghash = raw_bing_url.replace('https://www.bing.com/images/search?', '');
    const url = `/bing/search/${langid}/${encodeURIComponent(use_text)}/${encodeURIComponent(binghash)}`;
    top.frames.dictframe.location.href = url;
    return;
  }


  /**
   * Either open a new window, or show the result in the correct frame.
   */
  let show_lookup_page = function(dicturl, text, parent_text, langid, allow_open_new_web_page = true) {

    const is_bing = (dicturl.indexOf('www.bing.com') != -1);
    if (is_bing) {
      let use_text = text;
      if (parent_text != null && parent_text != '')
        use_text = parent_text;
      const binghash = dicturl.replace('https://www.bing.com/images/search?', '');
      const url = `/bing/search/${langid}/${encodeURIComponent(use_text)}/${encodeURIComponent(binghash)}`;
      top.frames.dictframe.location.href = url;
      return;
    }

    // TODO:fix_language_dict_asterisk
    // The URL shouldn't be prepended with trash
    // (e.g. "*http://" means "open an external window", while
    // "http://" means "this can be opened in an iframe."
    // Instead, each dict should have an "is_external" property.
    const is_external = (dicturl.charAt(0) == '*');
    if (is_external) {
      if (!allow_open_new_web_page) {
        console.log('Declining to open external web page.');
        return;
      }
      dicturl = dicturl.slice(1);
      const url = get_lookup_url(dicturl, text);
      open_new_lookup_window(url);
      return;
    }

    // Fallback: open in frame.
    const url = get_lookup_url(dicturl, text);
    top.frames.dictframe.location.href = url;
  };


  function do_term_lookup(allow_open_new_web_page = true) {
    const langid = $('#term_dto_language').val();
    if (langid == null || langid == '' || parseInt(langid) == 0) {
      alert('Please select a language.');
      return;
    }

    const termdicts = LANGUAGES[langid].term;
    const usedict = termdicts[termdictindex];
    show_lookup_page(usedict, $('#term_dto_Text').val(), $('#term_dto_ParentText').val(), langid, allow_open_new_web_page);

    termdictindex++;
    if (termdictindex >= termdicts.length)
      termdictindex = 0;
  }

  function do_sentence_lookup() {
    const langid = $('#term_dto_language').val();
    if (langid == null || langid == '' || parseInt(langid) == 0) {
      alert('Please select a language.');
      return;
    }

    const usedict = LANGUAGES[langid].sentence;
    show_lookup_page(usedict, $('#term_dto_Sentence').val(), $('#term_dto_ParentText').val(), langid);
  }


  function show_term_sentences(termid) {
    const url = `/term/sentences/${termid}`;
    top.frames.dictframe.location.href = url;
  }

</script>
